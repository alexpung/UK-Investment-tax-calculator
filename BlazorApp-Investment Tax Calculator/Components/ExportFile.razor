@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop;
@using Services

@inject IJSRuntime JS
@inject DividendExportService dividendExportService
@inject YearOptions years
@inject UkCalculationResultExportService calculationResultExportService
@inject UkSection104ExportService ukSection104ExportService
@inject ExportTaxEventService exportTaxEventService

<div class="container bg-dark text-light mb-4">
    <div class="row">
        <div class="col">
            <h3>Export Calculation Result to Files</h3>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-4 mb-2">
            <SfButton @onclick="InvokeExportDividend" CssClass="btn btn-primary w-100">Export Dividends</SfButton>
        </div>
        <div class="col-md-4 mb-2">
            <SfButton @onclick="InvokeExportTrades" CssClass="btn btn-primary w-100">Export Trades</SfButton>
        </div>
        <div class="col-md-4 mb-2">
            <SfButton @onclick="InvokeExportSection104" CssClass="btn btn-primary w-100">Export Section104</SfButton>
        </div>
        <div class="col-md-12 mb-2">
            <div class="note">
                <p class="text-info">Note: The export trade button give you a .json file, allowing you to import this file instead of your broker statements in the future.
                    This can also be used to export your manually entered trade in the "Add Trade" page.
                </p>
            </div>
        </div>
        <div class="col-md-4 mb-2">
            <SfButton @onclick="InvokeExportTaxEvents" CssClass="btn btn-primary w-100">Export trade data for future import</SfButton>
        </div>
    </div>
</div>


@code {
    private IJSObjectReference? _downloadFileJsScript;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _downloadFileJsScript = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/ExportFile.razor.js");
    }

    private async Task InvokeExportDividend()
    {
        string contents = dividendExportService.Export(years.SelectedOptions);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(contents);
        using var streamRef = new DotNetStreamReference(new MemoryStream(file));
        await _downloadFileJsScript!.InvokeVoidAsync("BlazorDownloadFile", "Dividends Summary.txt", streamRef);
    }

    private async Task InvokeExportTrades()
    {
        string contents = calculationResultExportService.PrintToTextFile(years.SelectedOptions);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(contents);
        using var streamRef = new DotNetStreamReference(new MemoryStream(file));
        await _downloadFileJsScript!.InvokeVoidAsync("BlazorDownloadFile", "Trades Calculation.txt", streamRef);
    }

    private async Task InvokeExportSection104()
    {
        string contents = ukSection104ExportService.PrintToTextFile(years.SelectedOptions);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(contents);
        using var streamRef = new DotNetStreamReference(new MemoryStream(file));
        await _downloadFileJsScript!.InvokeVoidAsync("BlazorDownloadFile", "Section104.txt", streamRef);
    }

    private async Task InvokeExportTaxEvents()
    {
        string contents = exportTaxEventService.SerialiseTaxEvents();
        byte[] file = System.Text.Encoding.UTF8.GetBytes(contents);
        using var streamRef = new DotNetStreamReference(new MemoryStream(file));
        await _downloadFileJsScript!.InvokeVoidAsync("BlazorDownloadFile", "data.json", streamRef);
    }
}
