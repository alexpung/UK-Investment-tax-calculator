@using Model
@using ViewModel
@using Model.Interfaces
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Model.TaxEvents
@using Model.UkTaxModel
@using Model.UkTaxModel.Stocks
@using Syncfusion.Blazor.SplitButtons
@using Enumerations
@using BlazorApp_Investment_Tax_Calculator.Components

@inject TradeCalculationResult tradeCalculationResult

<div class="bg-dark text-light">
    <div class="row my-4">
        <div class="col">
            <h3>Matching Details</h3>
        </div>
    </div>
    <div class="row me-3">
        <div class="col">
            <SfGrid ID="TradeMatchesGrid" @ref="tradeMatchesGrid" DataSource="@_tradeMatches"
                    AllowPaging="true" AllowSorting="true" AllowPdfExport="true" AllowExcelExport="true" AllowResizing="true" AllowFiltering="true"
                    Toolbar="@(new List<string>() { "PdfExport", "ExcelExport", "Print" })">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                <GridPageSettings PageSizes=@(new List<int>() {25, 50, 100}) PageSize="25"></GridPageSettings>
                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="TradeMatchViewModel?"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(TradeMatchViewModel.DisposalDate) HeaderText="Disposal Date"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.AssetType) HeaderText="Asset Type"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.AssetName) HeaderText="Asset Name"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.MatchType) HeaderText="Match Type"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.AcquistionTradeId) HeaderText="Acquisition trade ID"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.DisposalTradeId) HeaderText="Disposal trade ID"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.MatchDisposalQty) HeaderText="Matched disposal Quantity" Format="F2"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.DisposalProceed) HeaderText="Disposal Proceed"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.AllowableCost) HeaderText="Allowable Cost"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatchViewModel.Gain) HeaderText="Gain"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {
    public AssetCatagoryType SelectedAssetCatagoryType { get; set; } = AssetCatagoryType.STOCK;
    private SfGrid<TradeMatchViewModel?> tradeMatchesGrid = default!;
    private IEnumerable<TradeMatchViewModel?> _tradeMatches => tradeCalculationResult.CalculatedTrade
                                                                           .Where(trade => trade.AcquisitionDisposal == TradeType.DISPOSAL)
                                                                           .SelectMany(trade => trade.MatchHistory)
                                                                           .Select(tradeMatch => new TradeMatchViewModel(tradeMatch))
                                                                           .DefaultIfEmpty();


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "TradeMatchesGrid_pdfexport")  //Id is combination of Grid's ID and itemname
        {
            var pdfExportProperties = new PdfExportProperties()
                {
                    PageOrientation = PageOrientation.Landscape,
                    PageSize = PdfPageSize.A4,
                    IncludeTemplateColumn = true
                };
            await tradeMatchesGrid.ExportToPdfAsync(pdfExportProperties);
        }
        if (args.Item.Id == "TradeMatchesGrid_excelexport")  //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties exportProperties = new ExcelExportProperties();
            exportProperties.IncludeTemplateColumn = true;
            await tradeMatchesGrid.ExportToExcelAsync(exportProperties);
        }
    }
}


