@using Model
@using Model.Interfaces
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Model.TaxEvents
@using Model.UkTaxModel
@using Model.UkTaxModel.Stocks
@using Syncfusion.Blazor.SplitButtons
@using Enumerations

@inject TradeCalculationResult tradeCalculationResult

<div class="container-fluid bg-dark text-light">
    <div class="row my-4">
        <div class="col">
            <h3>Matching Details</h3>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="assetCategoryDropdown" class="form-label">Select asset category to display:</label>
            <SfDropDownList TValue="AssetCatagoryType"
                            TItem="string"
                            DataSource="@AssetCategoryValues"
                            @bind-Value="@SelectedAssetCatagoryType"
                            Placeholder="Select asset type to display"
                            CssClass="form-control"
                            ID="assetCategoryDropdown">
                <DropDownListEvents TValue="AssetCatagoryType" TItem="string" ValueChange="OnChange"></DropDownListEvents>
            </SfDropDownList>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <SfGrid ID="TradeMatchesGrid" @ref="tradeMatchesGrid" DataSource="@_tradeMatches"
                    AllowPaging="true" AllowSorting="true" AllowPdfExport="true" AllowExcelExport="true" AllowResizing="true"
                    Toolbar="@(new List<string>() { "PdfExport", "ExcelExport", "Print" })" Height="1000px">
                <GridEvents TValue="TradeMatch" OnActionFailure="@ActionFailure"></GridEvents>
                <GridPageSettings PageSizes=@(new List<int>() {25, 50, 100}) PageSize="25"></GridPageSettings>
                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="TradeMatch"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(TradeMatch.Date) HeaderText="Disposal Date" Type="ColumnType.DateOnly"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.AssetName) HeaderText="Asset Name" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.TradeMatchType) HeaderText="Match Type" Type="ColumnType.String">
                        <Template>
                            @{
                                var tradeMatch = context as TradeMatch;
                                var tradeMatchType = tradeMatch?.TradeMatchType.GetDescription();
                                <span>@tradeMatchType</span>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@(nameof(TradeMatch.MatchedBuyTrade) + "." + nameof(ITradeTaxCalculation.Id)) HeaderText="Acquisition trade ID"></GridColumn>
                    <GridColumn Field=@(nameof(TradeMatch.MatchedSellTrade) + "." + nameof(ITradeTaxCalculation.Id)) HeaderText="Disposal trade ID"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.MatchDisposalQty) HeaderText="Matched disposal Quantity" Type="ColumnType.Decimal" Format="C2"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.BaseCurrencyMatchDisposalProceed) HeaderText="Disposal Proceed" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.BaseCurrencyMatchAllowableCost) HeaderText="Allowable Cost" Type="ColumnType.String"></GridColumn>
                    <GridColumn Field=@nameof(TradeMatch.MatchGain) HeaderText="Gain" Type="ColumnType.String"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {
    public string[] AssetCategoryValues = Enum.GetNames(typeof(AssetCatagoryType));
    public AssetCatagoryType SelectedAssetCatagoryType { get; set; } = AssetCatagoryType.STOCK;
    private SfGrid<TradeMatch> tradeMatchesGrid = default!;
    private IEnumerable<TradeMatch> _tradeMatches => tradeCalculationResult.CalculatedTrade
                                                                           .Where(trade => trade.AssetCatagoryType == SelectedAssetCatagoryType)
                                                                           .Where(trade => trade.BuySell == TradeType.SELL)
                                                                           .SelectMany(trade => trade.MatchHistory);

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "TradeMatchesGrid_pdfexport")  //Id is combination of Grid's ID and itemname
        {
            var pdfExportProperties = new PdfExportProperties()
                {
                    PageOrientation = PageOrientation.Landscape,
                    PageSize = PdfPageSize.A4
                };
            await tradeMatchesGrid.ExportToPdfAsync(pdfExportProperties);
        }
        if (args.Item.Id == "TradeMatchesGrid_excelexport")  //Id is combination of Grid's ID and itemname
        {
            await tradeMatchesGrid.ExportToExcelAsync();
        }
    }

    private void OnChange(ChangeEventArgs<AssetCatagoryType, string> args)
    {
        SelectedAssetCatagoryType = args.Value;
        StateHasChanged();
    }

    public void ActionFailure(FailureEventArgs args)
    {
        Console.WriteLine(args);
        StateHasChanged();
    }
}


