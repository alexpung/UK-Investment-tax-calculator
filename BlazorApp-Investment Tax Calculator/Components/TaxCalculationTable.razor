@using Model
@using Model.Interfaces
@using Syncfusion.Blazor.Grids
@using Model.TaxEvents
@using Model.UkTaxModel
@using Model.UkTaxModel.Stocks
@using Enumerations
@using BlazorApp_Investment_Tax_Calculator.Components

@inject TradeCalculationResult tradeCalculationResult

<div class="container-fluid bg-dark text-light">
    <div class="row my-4">
        <div class="col">
            <h3>Disposal calculation summary</h3>
        </div>
    </div>
    <AssetTypeFilter OnSelectCategoryCallBack="OnSelectCategory"></AssetTypeFilter>
<SfGrid ID="DisposalCalculationGrid" @ref="disposalCalculationGrid" DataSource="@_trades"
        AllowPaging="true" AllowSorting="true" AllowPdfExport="true" AllowExcelExport="true" AllowResizing="true"
        Toolbar="@(new List<string>() { "PdfExport", "ExcelExport", "Print" })" Height="1000px">
    <GridPageSettings PageSizes="true"></GridPageSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ITradeTaxCalculation"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(ITradeTaxCalculation.Id) HeaderText="Trade Id"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.Date) HeaderText="Date" Format="d"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.AssetName) HeaderText="Asset Name"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.TotalQty) HeaderText="Total Quantity disposed"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.TotalProceeds) HeaderText="Total Proceeeds"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.TotalAllowableCost) HeaderText="Allowable Cost"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.Gain) HeaderText="Gain (Loss)"></GridColumn>
        <GridColumn Field=@nameof(ITradeTaxCalculation.UnmatchedQty) HeaderText="Unmatched shares"></GridColumn>
    </GridColumns>
</SfGrid>
</div>

@code {
    public AssetCatagoryType SelectedAssetCatagoryType { get; set; } = AssetCatagoryType.STOCK;
    private AssetTypeFilter _assetTypeFilter = new();
    private SfGrid<ITradeTaxCalculation> disposalCalculationGrid = new();
    private IEnumerable<ITradeTaxCalculation> _trades => tradeCalculationResult.CalculatedTrade
                                                                           .Where(trade => trade.AssetCatagoryType == SelectedAssetCatagoryType)
                                                                           .Where(trade => trade.BuySell == TradeType.SELL);

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "DisposalCalculationGrid_pdfexport")  //Id is combination of Grid's ID and itemname
        {
            var pdfExportProperties = new PdfExportProperties()
            {
                PageOrientation = PageOrientation.Landscape,
                PageSize = PdfPageSize.A4
            };
            await disposalCalculationGrid.ExportToPdfAsync(pdfExportProperties);
        }
        if (args.Item.Id == "DisposalCalculationGrid_excelexport")  //Id is combination of Grid's ID and itemname
        {
            await disposalCalculationGrid.ExportToExcelAsync();
        }
    }

    private void OnSelectCategory(AssetCatagoryType type)
    {
        SelectedAssetCatagoryType = type;
    }
}
